import mlflow
import mlflow.sklearn
from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, log_loss
import os
from pathlib import Path


# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏, —è–∫—ñ —Ö–æ—á–µ–º–æ –≤–∞—Ä—ñ—é–≤–∞—Ç–∏
learning_rate = 0.01
epochs = 100

# if not os.environ.get('MLFLOW_TRACKING_URI'):
#     print("‚ùå –ó–º—ñ–Ω–Ω–∞ MLFLOW_TRACKING_URI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
#     exit(1)
# if not os.environ.get('MLFLOW_TRACKING_USERNAME'):
#     print("‚ùå –ó–º—ñ–Ω–Ω–∞ MLFLOW_TRACKING_USERNAME –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
#     exit(1)
# if not os.environ.get('MLFLOW_TRACKING_PASSWORD'):
#     print("‚ùå –ó–º—ñ–Ω–Ω–∞ MLFLOW_TRACKING_PASSWORD –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
#     exit(1)

# –°—Ç–∞—Ä—Ç –ª–æ–≥—É–≤–∞–Ω–Ω—è
mlflow.set_experiment("MLOps Classification")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ –¥–ª—è –∑–∞–ø—É—Å–∫—É
import datetime
timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
run_name = f"iris_lr_{learning_rate}_epochs_{epochs}_{timestamp}"

print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {run_name}")

with mlflow.start_run(run_name=run_name):

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    mlflow.log_param("learning_rate", learning_rate)
    mlflow.log_param("epochs", epochs)
    mlflow.log_param("model_version", "1.0.0")
    mlflow.log_param("model_name", "iris_model")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    X, y = load_iris(return_X_y=True)
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)

    # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    model = LogisticRegression(max_iter=epochs)
    model.fit(X_train, y_train)

    # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)

    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
    acc = accuracy_score(y_test, y_pred)
    loss = log_loss(y_test, y_proba)

    

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
    mlflow.log_metric("accuracy", acc)
    mlflow.log_metric("loss", loss)
    mlflow.log_metric("data", 10000)
    

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ –∑ –ø—ñ–¥–ø–∏—Å–æ–º —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º –≤–≤–æ–¥—É
    input_example = X_test[:1]  # –ü—Ä–∏–∫–ª–∞–¥ –≤–≤–æ–¥—É (–ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö)
    mlflow.sklearn.log_model(
        model, 
        name="mlops_model",
        input_example=input_example,
        registered_model_name="mlops_classifier"
    )

    # print(f"‚úÖ –ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú–æ–¥–µ–ª—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞: {model_info.model_uri}")
    # print("üîó –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ MLflow UI —Ç–∞ Model Registry.")